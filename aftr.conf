#######################################
#This file contains variables and values that are stored in the
#ManagerEnvironmentConfiguration. Any variable/value pair can be
#retrieved.
#All variable names and their corresponding values are converted
#to use lower case unless quotes are placed around each element.
#
# Example aftr.conf body:
#
# playerName="Scott Nykl"
# gameLevel=3
# "EnableGravity"=1
# "DisableBlackholes"=0
# maxVelocity=123.456
# "UserPassword"="AftrBurnerEngine Rocks"
#
# //Inside the module code, retrieve the above values
#
# std::string modelPath = ManagerEnvironmentConfiguration::getSMM() + "/robotModel.3ds";
# std::string playerName = ManagerEnvironmentConfiguration::getVariableValue( "playerName" );
# int level = Aftr::toInt( ManagerEnvironmentConfiguration::getVariableValue( "gameLevel" ) );
# int gravityEnabled = Aftr::toInt( ManagerEnvironmentConfiguration::getVariableValue( "\"EnableGravity\"" ) );
# bool disableBlackHoles = (bool) Aftr::toInt( ManagerEnvironmentConfiguration::getVariableValue( "\"DisableBlackHoles\"" ) );
# float maxVel = Aftr::toFloat( ManagerEnvironmentConfiguration::getVariableValue( "maxVelocity" ) );
# std::string userPass = ManagerEnvironmentConfiguration::getVariableValue( "\"UserPassword\"" );
#
#Below are some built in configuration parameters
#######################################

#-------------
#OpenGL Context, Version, and Debugging Settings
#glcontextprofile specifies which profile mode the OpenGL context uses.
#   glcontextversion MUST be 3.2 or greater for this to be a value other than "compatibility".
#   Valid choices are "compatibility", "core", or "es", defaults to "compatibility".
#glcontextversion Specifies which version of an OpenGL Context to create. A valid OpenGL Version
#   must be supplied or context creation may fail.
#   Using a value of 2.1 is the most compatible, uses older GLSL built-ins, and does not have Compute Shaders.
#   Using a value of 3.2 or later provides "modern OpenGL" context.
#   Using a value of 4.3 or later provides compute shaders and is similar to using OpenGL ES 3.1.
#   Hardware must support the version. Defaults to 2.1 if not specified.
#gldebugmessagecallbackisenabled determines if glDebugMessageCallback is enabled or not. When set to a value
#   other than 0 or false, OpenGL Debug Information will be printed to standard out. Defaults to 0 (false)
glContextProfile=compatibility
glContextVersion=4.3
glDebugMessageCallbackIsEnabled=0
#-------------

#Set minimum time per frame. 16 ms is roughly 60 FPS
#minmillisecperframe=0

#Explicity tell SDL to turn Vsync off (vsync=0) or on vsync=1
#vsync=1

##Width and Height, in pixels, of the window.
##Setting width and height to 0 will set the resolution to match
##the current resolution.
#Uncomment the line below and set to desired value.
#width=800
#height=600

##If true, the window will take up the whole screen; windowed, otherwise.
#Uncomment the line below and set to desired value.
#fullscreen=0

##If true, a window is created and the module can be viewed (default).
##If false, no window is created and the user can only see the text output.
##This is typically set to false, when using intensive GPU-based computations
##that are mutually exclusive with any concurrent graphical environment
##like an OS's windowing system.
#Uncomment the line below and set to desired value.
#createwindow=1

##Specify the relative path from the Module's .exe to the shared
##multimedia folder and the local multimedia folder.
#Uncomment the line below and set to desired value.
#sharedmultimedpath can be quickly accessed via ManagerEnvironmentalConfiguration::getSMM()
#localmultimedpath can be quickly accessed via ManagerEnvironmentalConfiguration::getLMM()
#sharedmultimediapath="../../../shared/mm/"
#localmultimediapath="../mm/"

#Double Render into Oculus-compliant FBO for viewing with rift
#useOculusRift=1